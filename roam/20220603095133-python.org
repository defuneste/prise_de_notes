:PROPERTIES:
:ID:       dcc375e2-2f99-4940-a6b2-3cca1e5e2f30
:END:
#+title: python

C'est mon pot pourri pour Python

* Opérateur de comparaisons

Comment deux valeurs se comparent et renvoie un booleens

Python permet aussi des comparaison de strings, par contre ce n'est pas possible de comparer deux objet de nature différente.

~"bill" < "bob"~ renvoie TRUE

*** and

Renvoie True si les deux sont True sinon False


*** or

Seulement False or False renvoie False les autres combinaisons renvoient True

*** not

Retourne l'opposé

Il y a des fonctions particulière pour travailler sur [[id:8c4cd16e-6661-432d-a681-7dfbd5bcc62a][numpy]]

* Instructions conditionnelles

** If

La syntaxe de base:

#+begin_src python

if condition :
    expression1
    expression2
# il faut noter les quatres WS avant expression
# dans ce cas si la condition est False expresion1 et 2 ne sont pas lancé pour y remedier on peut ajouter else
#+end_src

Dans ce cas si la condition est False expresion1 et 2 ne sont pas lancées pour y remédier on peut ajouter else

** Else

#+begin_src python
if condition :
    expresionA
else :
    expressionB
#+end_src


** elif

#+begin_src python
if condition :
    expresion
elif condition :
    expresion
else :
    expresion
#+end_src

* loops

On peut faire des itérations sur tout les objets itérables. Tous ces objets on une méthode ~iter()~ associée et on va appliquer iter() pour créer un itérateur (nouvel object).

#+begin_src python :results output
mot = 'bou'
it =iter(mot)
print(next(it))
print(next(it))
print(next(it))
mot2 = 'tib'
it = iter(mot2)
print(*it)
# après * on a plus d'objet à itérer
#+end_src

#+RESULTS:
: b
: o
: t i b

Il est aussi possible d'itérer sur un dictionnaire mais il faut sortir clef valeur, cf plus bas avec items.

On peut aussi faire des itération sur un fichier:

#+begin_src python :results output
file = open('data/example.file.txt')
it = iter(file)
print(next(it))
print(next(it))
#+end_src

#+RESULTS:
: le bou est rond
:
: rond comme un balon
:


*** WHILE

#+begin_src python
while condition :
    expression
    # penser à updater un truc pour la condition
#+end_src


*** FOR

#+begin_src python
for var in seq :
    expresion
#+end_src

Il y a une fonction ~enumerate~ qui est bien pratique. Elle prend un objet iterable et retourne un objet de classe 'enumerate'. Il faut donc le convertir en une list.

#+begin_src python
for index, var in enumerate(seq) :
    print("index" + str(index) + ": " + str(un_extrait_de_seq))
#+end_src

On peut aussi looper sur une chaîne de caractères.

Ces deux cas sont simples (ce sont des vecteurs) mais cela se complique quand on passe sur des dictionnaires. On doit alors utiliser la méthode ~items()~ pour retourner la clef et sa valeur:

#+begin_src python :results output
taille = {"bill":1.70, "bob":1.85}

for clef, valeur in taille.items() :
     print(clef + " -- " + str(valeur))

#+end_src

#+RESULTS:
: bill -- 1.7
: bob -- 1.85

Il y a besoin d'une méthode en plus pour les ~nparray~ cf. [[id:8c4cd16e-6661-432d-a681-7dfbd5bcc62a][numpy]]. Il en va de même pour les Dataframe de [[pandas]].

Si on prend deux objets itérables de même taille on peut les *zipper* ensemble ce qui va retourner un objet de class zip: un itérateur de tuples. On peut ensuite utiliser list pour le convertir ou encore faire une loop for avec les deux éléments du tuple.

* Structure de données

La fonction ~type~ renvoie le type de l'objet

** List

#+begin_src python
dude = ['bill', 'bob']
taille_m = [1.70, 1.85]

ind_bob = dude.index('bob')
# index est une méthode qui renvoie l'index d'un objet

return taille_m[ind_bob]

#+end_src

#+RESULTS:
: 1.85

Python commence à indexer à 0

Une trick pas mal pour retourner la dernière valeur: ~[-1]~

Faire des opérations sur des list peut être fastidieux: il est possible des [[id:2e7b9f24-ae68-4e5b-bdfb-d978fcf7d301][list comprehension]].

La compréhension en liste retourne une list mais on peut aussi utiliser un *generators* qui lui retourne un *generator object.*

Pour produire un générateurs on remplace les ~[]~ par ~()~ dans la compréhension en liste. Les avantages est que l'on ne créait pas l'objet en entier mais juste l'élément suivant a chaque demande. On peut en faire des fonctions [[id:d3102237-3b34-4562-83d9-279d7a79ff3b][(generateur_functions).]]

** Dictionaires

C'est un système de key:value mais il ne peut pas y avoir plus d'un type de clef. Cela ne fait pas sens que bill est plusieurs taille. Les keys sont "immutables" à la différence des listes mais on peut changer des valeurs.

#+begin_src python
taille = {"bill":1.70, "bob":1.85}

return taille["bill"]

#+end_src

#+RESULTS:
: 1.7

La *méthode* ~keys()~ renvoie les clés ie ~taille.keys()~

On peut ajouter des clefs: ~taille['jim'] = 1.54~

On peut supprimer une paire avec ~del(dico["key"])~

A la différence d'une liste un dico est indexé par des clefs.

Il est aussi possible de faire des dictionnaires de dictionnaire:

#+begin_src python
taille = {'bill': {'taille':1.70, 'poids':75},
          'bob': {'taille':1.85, 'poids':90 }}

return taille['bill']['poids']
#+end_src

#+RESULTS:
: 75


Il existe des [[id:9c5b4aa4-79e3-4a7a-ba8c-7d1580d8890a][dictionnaire en compréhension]]

** Tuples

Comme une liste mais est /Immutable/

#+begin_src python :results output
tuple = (1, 2, 3) # à la difference de list utilise () au lieu de [ ]

print(type(tuple))
#+end_src

#+RESULTS:
: <class 'tuple'>

* Fonctions
*** un exemple simples

#+begin_src python :results output
def square(value) : # <- entête de la fonction
    new_value = value ** 2 # corps de la fonction
    print(new_value)
    # return new_value si on veut sauver le res de la f()

square(3)
#+end_src

#+RESULTS:
: 9

*** Docstrings

Permet de documenter la fonction. C'est une petite documentation placée après l'entête et c'est du text encapsuler dans 3 "".

*** Scope / portée

Cela correspond à l'etendue au sein de laquelle un identifiant (comme un nom de fonction) est lié.

Il y a plusieurs portée dans python:
- la portée globale: définie dans le corps du script
- la portée locale: définie à l'intérieur d'une fonction
- la porté de built-in : comme celle des packages

L'ordre de la porté se fait du local > enclosed function >  global > builin. On peut changer cet ordre en utilisant, par exemple, le mot clef ~global~ devant une variable. Cela permet d'accéder et donc de modifier la vairable "globale". Il existe aussi ~nonlocal~

La portée est importante dans les fonctions imbriquées.

#+begin_src python :result output
def mod2plus5(x1, x2, x3):
    def inner(x):
        return x % 2 + 5
    return (inner(x1), inner(x2), inner(x3))

print(mod2plus5(1 , 2 , 3))
#+end_src

#+RESULTS:
: None


*** Flexible arguments

~*args~ : all the arguments are pass into a tuple

~**kwargs~ : arguments precedés par des clefs, les arguments (key/value) sont passés à un dictionnaire
*** Lambda fonctions

Cela ressemble aux fonctions anonyme dans R

Elles sont utiles dans les fonctions comme map, filter ou reduce. Map et filter applique la fonction à tous les éléments et reduce ne retourne qu'un seul éléments.

Python à un objet "map" qu'il faut passer en liste ensuite.

#+begin_src python :result value
add_bangs = (lambda a: a + '!!!')
# si il y a plusieurs arg cela donne lambda a, b: a * b
obj = add_bangs('hello')
print(obj)
#+end_src

#+RESULTS:
: None


#+begin_src python
shout_spells = map(lambda a: a + '!!!', spells)
shout_spells_list = list(shout_spells)
#+end_src

*** Errors et exceptions

Une erreur détecter durant une exécution est appelée une **exception**

On lance la fonction avec un try-except:

#+begin_src python
def sqrt(x):
    try:
        return x ** 0.5
    except:
        print('x must be int of float')
        # on peut specifier ce que l'on veut comme type d'erreur comme par exemple except TypeError:
#+end_src

On peut aussi vouloir utiliser ~raise ValueError()~, raise va juste écrire un warning.

* [[id:8c4cd16e-6661-432d-a681-7dfbd5bcc62a][NumPy]]

Numpy est une librairie de Python fournissant un vecteur/matrice de n dimension et des méthodes/fonctions pour les créer et les manipuler.

* [[id:658786e3-79f5-472e-bcb4-4ce767d830da][Matplotlib]]

Une des bibliothèques de plot.

* [[id:a1f67fe2-36ce-44aa-b027-14256be6022f][Pandas]]
