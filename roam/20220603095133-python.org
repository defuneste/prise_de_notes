:PROPERTIES:
:ID:       dcc375e2-2f99-4940-a6b2-3cca1e5e2f30
:END:
#+title: python

C'est mon pot pourri pour Python

* Opérateur de comparaisons

Comment deux valeurs se comparent et renvoie un booleens

Python permet aussi des comparaison de strings, par contre ce n'est pas possible de comparer deux objet de nature différente.

~"bill" < "bob"~ renvoie TRUE

*** and

Renvoie True si les deux sont True sinon False


*** or

Seulement False or False renvoie False les autres combinaisons renvoient True

*** not

Retourne l'opposé

Il y a des fonctions particulière pour travailler sur [[id:8c4cd16e-6661-432d-a681-7dfbd5bcc62a][numpy]]

* Instructions conditionnelles

** If

La syntaxe de base:

#+begin_src python

if condition :
    expression1
    expression2
# il faut noter les quatres WS avant expression
# dans ce cas si la condition est False expresion1 et 2 ne sont pas lancé pour y remedier on peut ajouter else
#+end_src

Dans ce cas si la condition est False expresion1 et 2 ne sont pas lancées pour y remédier on peut ajouter else

** Else

#+begin_src python
if condition :
    expresionA
else :
    expressionB
#+end_src


** elif

#+begin_src python
if condition :
    expresion
elif condition :
    expresion
else :
    expresion
#+end_src

* loops

*** WHILE

#+begin_src python
while condition :
    expression
    # penser à updater un truc pour la condition
#+end_src


*** FOR

#+begin_src python
for var in seq :
    expresion
#+end_src

Il y a une fonction ~enumerate~ qui est bien pratique.

#+begin_src python
for index, var in enumerate(seq) :
    print("index" + str(index) + ": " + str(un_extrait_de_seq))
#+end_src

On peut aussi looper sur une chaîne de caractères.

* Structure de données

La fonction ~type~ renvoie le type de l'objet

** List

#+begin_src python
dude = ['bill', 'bob']
taille_m = [1.70, 1.85]

ind_bob = dude.index('bob')
# index est une méthode qui renvoie l'index d'un objet

return taille_m[ind_bob]

#+end_src

#+RESULTS:
: 1.85

Python commence à indexer à 0

Une trick pas mal pour retourner la dernière valeur: ~[-1]~

** Dictionaires

C'est un système de key:value mais il ne peut pas y avoir plus d'un type de clef. Cela ne fait pas sens que bill est plusieurs taille. Les keys sont "immutables" à la différence des listes mais on peut changer des valeurs.

#+begin_src python
taille = {"bill":1.70, "bob":1.85}

return taille["bill"]

#+end_src

#+RESULTS:
: 1.7

La *méthode* ~keys()~ renvoie les clés ie ~taille.keys()~

On peut ajouter des clefs: ~taille['jim'] = 1.54~

On peut supprimer une paire avec ~del(dico["key"])~

A la différence d'une liste un dico est indexé par des clefs.

Il est aussi possible de faire des dictionnaires de dictionnaire:

#+begin_src python
taille = {'bill': {'taille':1.70, 'poids':75},
          'bob': {'taille':1.85, 'poids':90 }}

return taille['bill']['poids']
#+end_src

#+RESULTS:
: 75

* [[id:8c4cd16e-6661-432d-a681-7dfbd5bcc62a][NumPy]]

Numpy est une librairie de Python fournissant un vecteur/matrice de n dimension et des méthodes/fonctions pour les créer et les manipuler.

* [[id:658786e3-79f5-472e-bcb4-4ce767d830da][Matplotlib]]

Une des bibliothèques de plot.

* [[id:a1f67fe2-36ce-44aa-b027-14256be6022f][Pandas]]
