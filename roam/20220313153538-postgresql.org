:PROPERTIES:
:ID:       1d9417f1-f239-4855-b3ea-3e3d2ef2e6d5
:END:
#+title: PostgreSQL

* liste des commandes pratiques en psql:

- `\dn`: liste les schémas dans une DB

C'est proche ce `SELECT schema_name FROM information_schema.schemata;`

- `\timing` débute et termine un chronomètre

* [[id:c75a51da-a6cc-4ec2-b7f5-2dbfb72b9982][Data types]]
* Extension dans PostgreSQL

* Extensions

La liste des extensions disponibles est accessible via la table ~pg_available_extensions.~ Celle qui sont installées peuvent être consultées via ~pg_extension~.

#+begin_src sql
-- charger une extensions
CREATE EXTENSION IF NOT EXISTS fuzzystrmatch;
-- ici une extension pour la gestion de texte
-- on verifie
SELECT extname FROM pg_extension;
#+end_src

** Data types définis par l'utilisateur
Il existe des data types définit par des utilisateur. On peut y accéder via la table ~pg_type~.

Exemple: Enumerated data types ou ENUN permet de faire des listes de valeurs qui ne changeront pas.

#+begin_src sql
CREATE TYPE dayofweek AS ENUM (
'Monday',
'Tuesday',
'Wednesday',
'Thursday',
'Friday',
'Saturday',
'Sunday'
);
#+end_src

Dans INFORMATIONS_SCHEMA.COLUMNS il est aussi possible de regarder si la colonne data_type contient "USER-DEFINED".

** Fonction créer par l'utilisateur

Il faut utiliser CREATE FUNCTION et specifier le langage utilisé.

*  Contraintes

- Foreign key: doit exister dans la colonne de références (ou Null)

- Primary key: doit être unique (ou NULL)

- Unique: toutes les valeurs doivent être différentes ou (NULL)

- Not null : obv.

- Check constraints: une condition en fonction des valeurs, ex column < 0, columnA > columnB

* Table temporaire

#+begin_src sql
create temp table new_tablename as
select col1, col2
from table;
-- autre option avec select into
select col1, col2
   -- on redirige
   into temp table new_table
   -- la table source
   from table;
#+end_src
