:PROPERTIES:
:ID:       d71a50b6-ea84-4177-a603-1089c082e78a
:END:
#+title: R_base

Besoin de l'organiser un peu plus tard!


*** by() + do.call()

C'est une variante de ~tapply()~ pour les dataframes. Il va retourner une list qu'il faudra reassembler avec par exemple ~do.call(mon_resultat, "rbind")~.

#+begin_src R :results output :session *R* :exports both
string_case <- read.csv("data/string_case")

temporary  <- data.frame(do.call("rbind",by(string_case,
                              INDICES = string_case$Region,FUN=function(x) x[which.max(x$Total_sales),],
                              simplify=FALSE)))
temporary[,c("Region", "Representative", "Total_sales")]

#+end_src

#+RESULTS:
:          Region Representative Total_sales
: Central Central          Jimmy        7800
: East       East         Stuart        9000
: West       West        Aishley        3000

*** optim()

Optim est utiliser pour obtenir la dérivée d'une fonction. Elle prend trois arguments  ~par~ les valeurs des paramètres à optimiser, ~fn~ la fonction à optimiser et passer en ~...  ~data~

Sources des exemples:  https://magesblog.com/post/2013-03-12-how-to-use-optim-in-r/

#+begin_src R :results output :session *R* :exports both
# simple data
dat=data.frame(x=c(1,2,3,4,5,6),
               y=c(1,3,5,6,8,12))
# la fonction à optimiser
min.RSS <- function(data, par) {
              with(data, sum((par[1] + par[2] * x - y)^2))
}
optim(par = c(0, 1), fn = min.RSS, data = dat)
#+end_src

#+RESULTS:
#+begin_example
$par
[1] -1.266846  2.028620

$value
[1] 2.819048

$counts
function gradient
      89       NA

$convergence
[1] 0

$message
NULL
#+end_example

~$par~ nous donne l'intercept et la pente.

* Formules et modèles

** fonctions de base pour interagir avec des sorties de modèles

#+begin_src R :results output :session *R* :exports both
un_model <- lm(speed ~ dist, data = cars)
un_model
#+end_src

#+RESULTS:
:
: Call:
: lm(formula = speed ~ dist, data = cars)
:
: Coefficients:
: (Intercept)         dist
:      8.2839       0.1656

- ~coefficients(un_model)~ : renvoie un vecteur nommé avec les coefficient

- ~fitted(un_model)~ : un raccourcie pour retourner l'equivalent de ~predict(un_model, data)~. Elle renvoie la prédiction du modèle pour les données.

- ~residuals(un_model)~ : response value - les valeurs prédites

- ~hatvalues(un_model)~ : retourne un indicateur sur le /Leverage/ ou "how extreme" une valeur explicative est, plus une valeur est éloignée des autres plus elle à du leverage.

- ~cooks.distance(un_model)~ : mesure l'influence d'un point dans le modèle (c'est obtenue avec /leave-one-out/)

 Le paquet /Broom/ a deux fonctions ~tidy~ et ~augment~ qui permettent de transformer les sorties de modèles en objet plus facile d'accès.

  * ~tidy(un_nodel)~ : renvoie les coeffs dans un tible

  * ~augment(un_model)~ : renvoie un tibble avec les observations, les valeurs estimées, les résides et d'autres colonnes.

Si on a besoin de transformer une variable on peut utiliser ~I()~ une fonction que l'on nomme "as is". Comme les opérateurs ont des utilisations spécifiques avec la syntaxe formule il faut utiliser I() pour indiquer que l'on souhaite ici utiliser leur forme traditionnelle pour effectuer une transformation.

*** Predict()

Predict prend un modèle et des données pour retourner les valeurs que se modèle prédit.

Predict est une fonction générique et il est important de regarder la fonction spécifique à la classe. Ie ~predict.glm~ est diffèrent de ~predict.lm~

Pour mettre en place des simulations et des prédictions ~expand.grid()~ permet de créer un df pour chaque combinaisons.

*** [[id:eb25bf36-4011-4493-ad1f-0854e6032030][matrice de confusion]]

*** [[id:f13d6bea-0056-48dd-bccd-d47bb3ab943b][multiple régressions]]
