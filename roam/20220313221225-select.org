#+title: SELECT

** Le B.A BA de SELECT

Select est sans doute l'un des verbes le plus utilisé. Il sert à récupérer de l'information.

#+name: select_basic
#+begin_src sql
  SELECT colonne_1 FROM ma_table
#+end_src

La base de données va prendre FROM en premier puis SELECT et ~;~ permet de séparer avec un autre statements.

On peut utiliser ~*~ pour sélectionner toutes les colonnes mais cela peut être gourmand. Le plus souvent il faut spécifier chaque colonne séparer par ~,~.


#+name: select_basic
#+begin_src sql
SELECT
    first_name,
    last_name,
    salary
FROM income
WHERE salary < 10000;
#+end_src


On écrit les requêtes SQL dans un certains ordre:

SELECY > FROM + JOIN > WHERE > GROUP BY > HAVING > ORDER BY > LIMIT

Mais elle s'exécute dans un ordre différent:

FROM + JOIN > WHERE > GROUP BY > HAVING > SELECT > ORDER BY > LIMIT

Cela fait sens: on va d'abord récupérer les tableaux, puis les filtrer, produire des agrégats, filtrer sur ces agrégats, les ordonner et en limiter l'afichage.

*** COUNT

Permet de compter le nombre de lignes

~COUNT(*)~ va compter toutes les lignes

~COUNT(col_names)~ va compter toutes les lignes non null


** FROM

** JOIN et les[[id:8fe684d1-89e7-4334-b3e8-4c666bb4a659][ Jointures]]

** WHERE

WHERE est utilisé pour filtrer des lignes. Cf. un peu plus haut avec ~WHERE salary < 10000~.

~<~ ici utilisé est un[[id:5622cd55-8baa-4095-9962-fbd311bc7a4f][ Opérateurs SQL]].

*** LIKE et ILIKE

ILIKE n'est pas sensible aus majuscules

Il y a des wildcards de possibles ~%~ et ~_~


** GROUP BY

*** HAVING

**  ORDER BY

On peut faire un GROUP BY sur un index des colonnes (commençant par 1) à la place d'indiqué le nom de la colonne.

** LIMIT
