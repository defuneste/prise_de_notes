:PROPERTIES:
:ID:       c75a51da-a6cc-4ec2-b7f5-2dbfb72b9982
:END:
#+title: data_type_postgresql

On put obtenir les types de données en interrogeant la table INFORMATION_SCHEMA.COLUMNS. INFORMATION_SCHEMA est un schema (yes..) qui contient aussi les tables (INFORMATION_SCHEMA.tables).

#+begin_src sql
SELECT
        column_name,
        data_type
FROM INFORMATION_SCHEMA.COLUMNS
WHERE column_name in ('le', 'nom', 'des', 'colonnes')
AND table_name = 'le_nom_de_la_table';
#+end_src


** Données textuelles

- CHAR

- VARCHAR

- TEXT : non limité en nombre de caractères

  Il existe des [[id:5e71f432-f392-4a83-8636-eacf55ceee43][fonctions spécifiques]] pour manipuler ce type de données.

** Données numériques

- INT

- DECIMAL

*** variance

~var_pop()~ calcule la variance pour la population

~var_samp()~ calcule la variance pour l'échantillon

Il y a aussi stdev().

*** TRUNC

Est utilisé pour tronquer des données. C'est une fonction qui prends deux arguments, le premier est la valeur et le second est la précision. Si cette valeur est positive la valeur est tronquée dans les decimal si elle est negative on va tronquer dans les entier (ex trunc(35, -1) va donner 30).

*** Generate series

On peut avoir besoin de génerer des nombres (pe pour dans un group by pour "bins" des valeurs).

~select generate_serie(start, end , step);~


Dans ce cas là on peut utiliser WITH pour générer les bornes de bins.




** Données de date et temporelle

- DATE: la date: 2022-04-26

- TIME: l'heure: 18:58:07

- TIMESTAMP contient les valeurs pour les dates et pour le temps. Le format est le ISO 8601 (yyyy-mm-dd).

- INTERVAL: perdiode de temps exemple: 2 jours

  #+begin_src sql
-- le jeux de données du loueur de dvd
SELECT rental_date + INTERVAL '3 days' as date_de_retour
FROM rental;
  #+end_src

Cette requête va retourner la date de retour 3jours plus tard.

Les [[id:5622cd55-8baa-4095-9962-fbd311bc7a4f][Opérateurs]] se comportent de façon particulière sur le formats date et time: ajouter un entier sur une date ajoute des jours et ajouter une date à une date donne un interval.

On peut aussi utiliser la fonction [[https://www.postgresql.org/docs/current/functions-datetime.html][AGE]] qui prend deux arguments TIMESTAMP.

~NOW()~ retourne maintenant comme CURRENT_TIMESTAMP(). CURRENT_DATE et CURRENT_TIME existe également.

Dans postgreSQL il est possible de changer le type (casting type) :

#+begin_src sql
SELECT NOW()::timestamp;
        -- ou encore ds SQL std
SELECT CAST(NOW() as timestamp);
#+end_src

*** Fonctions d'extraction "temporelle"

Elles prennent en géneral une syntaxe assez proche:

#+begin_src sql
SELECT EXTRACT(quarter FROM timestamp '2022-04-27 16:46:00') as quarter;

SELECT DATE_PART('quarter', timestamp '2022-04-27 16:46:00' ) as quarter;

SELECT DATE_TRUNC('year', timestamp '2022-04-27 16:55:00');

#+end_src

DATE_TRUNC commence par indiqué la précision : ~date_trunc(field, source [, time_zone ])~ avec un field pouvant aller de la `microseconds` à `millénium`.


** Arrays

Cela semble une spécificité de PostgreSQL qui permet de stocker des tableaux multidimensionnels dans une colonnes. Dans R ce serait des listes.

On les définie lors du CREATE en ajoutant ~[]~ après la définition du type.

Ex: ~email text [][]~ permet par exemple de créer une colonne avec deux éléments le premier peut être le type d'adresse (pro/perso) et le second l'adresse.

On peut les utiliser dans des SELECT ou des WHERE : ~email[1][1] as type~ donne le type d'adresse pour le premier élément.

NB: index commence par 1 et pas 0.

Il est aussi possible d'utiliser ANY:

~WHERE 'ce_que_je_cherche' =  ANY(mon_array)~

On peut aussi utiliser @>:

~WHERE mon_array @> ARRAY['ce_que_je_cherche']~

** CAST

Changer le type:

#+begin_src sql
select cast (value as new_type);
-- on peut aussi utiliser dans postgresql ::
select value::new_type;
#+end_src

changer le type peut arrondir les valeurs.
