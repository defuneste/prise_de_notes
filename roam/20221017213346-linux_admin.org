:PROPERTIES:
:ID:       f107f428-41c6-45e5-b6d9-3e35268af5f1
:END:
#+title: linux_admin

Commande utiles de linux

#+begin_src bash
scp mon_fichier mon_adress:/path/a/suivre
#+end_src


si on a pas de sudoers il faut le creer en utilisant ~su~ un fichier est mis en palce dans ~/etc/sudoers.d/~

il est possible de terminer la GUI et de le relancer a partir d'un VT

~sudo systemctl stop gdm~

et

~sudo systemctl start gdm~

pour le relancer

** Basic Operations

~ssh user_name@remote_machin.com~

shutodown est mieux que reboot (shutdown -r)

On peut plannifer un shutdown et y ajouter un message

*** locating applications:

~which diff~ ou alaternative ~whereis diff~


*** naviagtion dans des repertoires:

~cd -~ permet de retourner au precedent, il va print le pwd aussi

~tree -d~ ne montre que les directory

*** hard et soft link

~ln~ (-s) est utilise pour creeer des hard et soft link

on pit utiliser ls avec -i (pour inode pour lister l'index de la note du fichier)


soft link est affiche de maniere differente et a un in inode specifique
*** pushd and popd

construit une list de place ou on a bouger, ~dirs~ permet de les lister

touch ~-t~ permet de specifier un timestamp MMDDYYYY

*** locate and find

locate build a db first

find default pathname et le working dir

le premier argument de find est le dir apres on utilise -name pour le nom:

ex: ~find /usr -name gcc~

-type d ou f peut etre utiliser pour directory ou file


find peut aussi lancer dirctement des commandes sur les fichier trouver avec ~-exec~ :  ~find -name "*.swp" -exec rm{} ';'~

{} est un placeholder qui va etre rempli par le resultats de find

Il faut aussi termier le statement avec ; (ici single quote pour echaper ;)

find peut aussi chercher par taille de fichier avec -size

find a aussi -ls

*** bash wildcards

- ? matches any single character

- * matches any string of characters

- [my_set] matches any character in my_set [adf] will matches any occurence of a, d, f

- [!set] matches any character not in set


** DPKG

dpkg --list : list all pkges (robably followed by grep or less)

dpkg --listfiles bzip2 | less va lister les fichier d'un pkge

*** apt

apt a plusieurs programme comme apt-cahe et apt-get

*** man

on utilise souvcent man something | less

~man -f~ permet de lister les pages (~whatis~)

~man -k~ list the page that are discussing a specifi topic (~apropos~)

man est divise en chapitre de 1 a 9

man -a nom va donner toutes les pages avec nom


* Process

ps and top sont utilise pour gerer les process


" A process is simply an instance of one or more related tasks (threads) executing on your computer. It is not the same as a program or a command, A single command may actually start several processes simultaneously"


Les processesus utilisent des ressources systemes et c'est l'OS qui assure l'optimisation de leur utilisation.

** types de processus

Une fenetre de terninal (un type particulier de commande shell) est un processus qui tourne autant de temps que necessaire. Cela permet d'acceder a des ressources a partir d'un environnement interactif.

On peut aussi lancer des programmme en "fond" ce qui signifie qu'ils sont detache du shell.


*** Type de processus:

- interactif: lancer par un utilisateur, example bash, firefox, slack
- batch process: process lancer automatiquement, programme pour un certain moment. non connecte a un terminal. Utilise FIFO (first in first out). Example: updatedb
- Daemons: Processus de type server qui fonctionnent tout le temps, lancer au demarage et attende d'avoir des requetes. Example httpd, sshd
- Threads: processus leger souvent englober dans un process principal
  example: gnone-termninal_server
- Kernel threads: processus en dehors du control d'un utilisateur, bouger un threads d'un CPU a un autre, example Kthreados


Le scheduler est une fonction du noyau qui bouge constament les processus entre les CPU en fonction de leur priorite, du temps necessaire et de combien ils sont deja eu.

Quand un processus est "_running_" cela signifie qu'il execute des instructuions sur un CPU, attends d'avoir du temps d'execution. Ils sont organise dans une "Run queue".

Le mot running peut paraite ambigu car un process peut etre en attente.

Un autre etat peut etre _sleep_: en attente de quelque chose

Enin un processus peut etre _zombi_ : il n'a plus de parents, pas vraiment vivant mais toujours present


l'OS garde de trace des processus en leur donnant un ID (PID), un porcessus a aussi Parent Process ID (PPID) et un thread ID (TID)

Pour terminer un processus:

~kill -SIGKILL <PID>~ ou ~kill -9 <PID>~

*** users and group ID

plusieurs utilisateurs peuvent utiliser un meme system et ils peuvent tous utiliser de nombreux process. Le system identifie l'utilisateur qui lance le processus par son Real User ID, RUID, (un ID par utilisateur).

L'utilisateur qui determine les droit d'access pour un utilisateur est Effective UID. Il peut etre dans le meme group ou pas du RUID.

en genral l'uid des utilisateurs commence a partir de 1000

La priorite d'un process est specifie par sa "nice value", plus bas elle est plus ce process est important: -20 est le plus prioritaire et +19 est le moins urgent.

nice command permet de changer cette prio

~ps -lf~ permet de voir plus d'info

~renice +5 <PID>~ va fixer la priorite

gnone-system-monitor permnet de la faire a partir d'une interface graphic


load averages: moyenne sur une periode de temps donnees pour un CPU (on peut en avoir plusieurs et c'est exprime en pourcentage sur 1) :

+ "actively running on CPU"
+ "runnable but waiting in queue"
+ sleeping

  on peut le consulater avec ~w~, ~top~ et ~uptime~

example: 1 a la seconde valeur veut dire qu'un system avec un seul CPU a ete constament utilise sur les cinq derniere minutes.

** Background and foreground processes

_Foreground_ jobs sont ceux qui sont lance d'un terminal, quand un foreground est lance les autre jobs doivent attendre pour avoir acces au shell.

Si la tache est trop longue c'est une bonne idee de l'envoyer en background pour liberer le shell. Cette tache auara une plus faible priorite.

On peut specifier qu'un job soit envoye en background on ajoutant ~&~.

example: ~updatedb &~

On peut utiliser ctrl+z pour mettre un job foreground -> background.

~bg~ permet de lancer un processus suspendu en background et ~fg~ permet de le lancer en foreground

jobs permet de montrer tout les processus en background, ajouter -l permet d'avoir plus d'info comme le PID.

Ils sont connecte a une terminal et donc si on quitte un terminal on ne va plus les voir.

** ps

ps est pour process status

ps -u est pour un user specifique

ps -ef montre tout les processs avec pleins de details

-f done le parent process

pstree premet de voir les relations entre les processus

** top

Memory usage is divided in two categories RAM (physical mem.) and Swap space. The first one is on line 4

VIRT is for virtual (no def.), RES is for physical (I guess RAM) and SHR for shared (?)

top a une serie de raccourcie pour interargir avec  les processus

h -> give the keys available


** starting process in the future (scheduler)

~at~ est une option

*** cron

son config file est a ~/etc/crontab~ (cron table)

chaque ligne represent un job  et est compose de cron expression
/
crontab -e va ouvri un editor pour editer un job ou en creer de nouveau

anacron a ete mis en place pour gerer quand la machine a ete
eteinte

sleep peut etre utilise pour suspendre un execution pour une certaine periode de temps

** file systems

un file systemes doit etre monter (mount)

/dev/sda:

        - /dev/sda1/
        - dev/sda5/home
        - /dev/sda6/var
pour monter on utilise ~mount~

example: ~sudo mount /dev/sda5 /home~

puis on unmount

sudo umount /home

pour que cela soit permanent il faut editer /etc/fstab (filesystem table)
 cf man fstab

 *** NFS pour Network File System

 un utilisateur va se connecter sur un disque distant qui lui lance un daemons lui autorisant a se connecter (/etc/exports)

 le client a un sudo mount servername:/un_truc mnt/nfs/projects

 /bin contient les binary classic

 /sbin ceux utiliser pour le system

 il peut y en avoir aussi /usr/bin et /usr/sbin

 /proc est un pseudo file ssytem et permet de consulter des info sur le noyau

 /dev contient des info sur les devices

 /var contient des fichiers qui peuvent changer en taille

/var/log a les log

/var/lib contient les packqges et les fichiers de DB

/var/spool contient les "print queues"

/var/tmp les fichier temporaires

/ect contient les configs nortmalement 0 binary mais peut contenir des scripts

/boot contient de quoi booter les systemn

/lin et /lib64 contient des liobrary necessaire pour les applications dans bon et /sbin

elles sont dynamically loaded (ou encore shared object)

Les media ecjectable sont soit dans /media et maintenant dans /run/media

*** /usr

il contient des programs et des scripts non essentiels


*** diff

diff compare fichiers et repertoires

*** file

file permet de connaitre la natuire d'un fichier

** backihng up data

rsync est recommande (option -r pour recursive)

il a l'option -dry-run pour eviter des pbs

 bon example: ~rsync --progress -avrxH  --delete sourcedir destdir~

cp ne marche qu'en local

*** compressing data

- gzip
- bzip2 (smaller mais plus long a produir)
- xz (pareil echange taille de compression contre temps long)
- zip

  + tar (tape archive)

* Text editors


Basic editing:

echo line one > myfile

echo line two >> myfile

cat << EOF  > myfile
> one
> two
> EOF


** nano and gedit

considere comem basic

** vi

cf. vimtutor

pour rechercher un patron  comme file /file (chercher en avant) et ?file cherche en arriere

puis n pour next and N pour previous next

** emacs

pour lancer emacs en mode "vanilla" (sans la config)

* user environnement


whoami qui suis je?

who qui est logge

** ordre des fichiers de demarage:

 login shell yes -> .bash_profile -> .bash_login -> .profile
 no -> .bashrc

 les alias sont souvent placer dans .bashrc

 On peut aussi les trouver dans ~/etc/group~

 On peut ajouter et supprimer des utilisateurs avec ~useradd~ or ~userdel~

C'est pas mal de regarder leur option car certains parametres peuvent etre specifier A l'invocation de la commmande.

En general on peut les retrouver dans ~/etc/default/useradd~

sudo passwd mon_user doit ensuite etre utilise

on peut creer un nouveau group avec ~groupadd~ (et ~groupdel~) puis on utilise ~usermod~ pour ajouter un utilisateur a un group

 ~id~ donne pas mal d'info de l'utilisateur en cours

 su: switch/subsitute user

 les config de sudo sont dans /etc/sudoers ou /etc/sudoers.d

** Environnement Variables

quantities that have specific values. Elles peuvent etre consultees avec ~set~, ~env~ et ~export~.

des env var creer dans un shell reste confine dans ce dernier, si on veut qu'un child process y ai acces on doit les exporter.

Pour history il y a plusieurs env var:

- HISTFILE (ou il est)
- HISTFILESIZE (nb de ligne max)
- HISTSIZE (max number of command in history file)
- HISTCONTROL (used on mac?)
- HISTIGNORE commands qui peuvent etre ignore

  !NUM execut command history number

  CTRL + L clean screen

  CTRL + S / CTRL + Q : unclear on mac

  CTRL + D: exist shell

  CTRL + Z: met le process en cours en bg

  CTRL + C: kills the current process

  CTRL + A : go to the begining of line

  CTRL + W: delete the world before cursor

  CTRL + U: delete from the begining of cursor

  CTRL + E: end of line


** File Ownership

chaque fichier est associe avec un owner  et un groupe ainsi que des permissions

~chown~ pour specifier le owner

~chgrp~ pour le group

et ~chmod~ pour les permissions


Les fichiers peuvent etre r (read), write (w) et execute (x) et ceux pour les users/owner / group / other

example: ~-rw-rw-r--~

chmod a pas mal de facon de changer les permissions

~chmod uo+x,g-w some_file~  donn execute a uther et other et retire write a group

4 pour lecture, 2 pour ecriture et 1 pour execute

ainsi 755 done tout pour l'users et lecture/execution pour le reste

** Manipulating text

cat peut etre utilise en mode interactif

ou encore avec EOF

comme cat > ny_file << EOF

pour testes des fichiers compresse il est possible d'utiliser zcat, zless zgrep and zdiff

*** sed

permet de modifier le contenu d'un fichier ou d'un flux

data from imput -> working stream -> output stream

sed -e my_command my_file permet d'editer le fichier dans un terminal

sed -f scriptfile my_file mets les command dans un fiochier script

echo " I hate you" | sed s/hate/love/

sed s/pattern/replace_string/ file remplace la premiere occurrence de chaque ligne

sed s/pattern/replace_string/g file remplace toutes les occurence de chaque ligne

sed -i s/pattern/replace_string/g file remplace dans le meme fichier

*** awk

comme pour sed on peut specifier des commandes dans le CLI

awk lit ligne par ligne

-F permet d specifier le deliminateur des champs

~awk -F: '{ print $1 }' my_file~ va imprimer le premier champs separe par :
*** sort

sort un fichier en fonction, par defaut du premier char de chaque ligne (on peut aussi utiliser -k pour specifier un champs)
*** uniq

remove unique and consecutive lines

pas mal d'utiliser sort avant ou d'ajoyter -u a sort

*** Regex

| patterns  | usage                          |
| ----      | ----                           |
| .         | match single char              |
| a [bar] z | match a or z                   |
| \$        | match EOL                      |
| \^        | match begining of Line         |
| \*        | match preceding item 0 or more |

*** tee

envoie le stdout en stdout et aussi dans un fichier

ls -l | tee my_file
*** wc: world count

wc -l nombre de lignes

wc -c nombre de bytes

wc -w nombre de mots

* networks

A network is a group of computers and computing devices connected together through communication channels, such as cables or wireless media.

A network:

- allow connected devices to communicates with each other
- multiple users share devices over the networks
- share and manage information such as DB and FS accross computers
