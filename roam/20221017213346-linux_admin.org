:PROPERTIES:
:ID:       f107f428-41c6-45e5-b6d9-3e35268af5f1
:END:
#+title: linux_admin

Commande utiles de linux

#+begin_src bash
scp mon_fichier mon_adress:/path/a/suivre
#+end_src


si on a pas de sudoers il faut le creer en utilisant ~su~ un fichier est mis en palce dans ~/etc/sudoers.d/~

il est possible de terminer la GUI et de le relancer a partir d'un VT

~sudo systemctl stop gdm~

et

~sudo systemctl start gdm~

pour le relancer

** Basic Operations

~ssh user_name@remote_machin.com~

shutodown est mieux que reboot (shutdown -r)

On peut plannifer un shutdown et y ajouter un message

*** locating applications:

~which diff~ ou alaternative ~whereis diff~


*** naviagtion dans des repertoires:

~cd -~ permet de retourner au precedent, il va print le pwd aussi

~tree -d~ ne montre que les directory

*** hard et soft link

~ln~ (-s) est utilise pour creeer des hard et soft link

on pit utiliser ls avec -i (pour inode pour lister l'index de la note du fichier)


soft link est affiche de maniere differente et a un in inode specifique
*** pushd and popd

construit une list de place ou on a bouger, ~dirs~ permet de les lister

touch ~-t~ permet de specifier un timestamp MMDDYYYY

*** locate and find

locate build a db first

find default pathname et le working dir

le premier argument de find est le dir apres on utilise -name pour le nom:

ex: ~find /usr -name gcc~

-type d ou f peut etre utiliser pour directory ou file


find peut aussi lancer dirctement des commandes sur les fichier trouver avec ~-exec~ :  ~find -name "*.swp" -exec rm{} ';'~

{} est un placeholder qui va etre rempli par le resultats de find

Il faut aussi termier le statement avec ; (ici single quote pour echaper ;)

find peut aussi chercher par taille de fichier avec -size

find a aussi -ls

*** bash wildcards

- ? matches any single character

- * matches any string of characters

- [my_set] matches any character in my_set [adf] will matches any occurence of a, d, f

- [!set] matches any character not in set


** DPKG

dpkg --list : list all pkges (robably followed by grep or less)

dpkg --listfiles bzip2 | less va lister les fichier d'un pkge

*** apt

apt a plusieurs programme comme apt-cahe et apt-get

*** man

on utilise souvcent man something | less

~man -f~ permet de lister les pages (~whatis~)

~man -k~ list the page that are discussing a specifi topic (~apropos~)

man est divise en chapitre de 1 a 9

man -a nom va donner toutes les pages avec nom


* Process

ps and top sont utilise pour gerer les process


" A process is simply an instance of one or more related tasks (threads) executing on your computer. It is not the same as a program or a command, A single command may actually start several processes simultaneously"


Les processesus utilisent des ressources systemes et c'est l'OS qui assure l'optimisation de leur utilisation.

** types de processus

Une fenetre de terninal (un type particulier de commande shell) est un processus qui tourne autant de temps que necessaire. Cela permet d'acceder a des ressources a partir d'un environnement interactif.

On peut aussi lancer des programmme en "fond" ce qui signifie qu'ils sont detache du shell.


*** Type de processus:

- interactif: lancer par un utilisateur, example bash, firefox, slack
- batch process: process lancer automatiquement, programme pour un certain moment. non connecte a un terminal. Utilise FIFO (first in first out). Example: updatedb
- Daemons: Processus de type server qui fonctionnent tout le temps, lancer au demarage et attende d'avoir des requetes. Example httpd, sshd
- Threads: processus leger souvent englober dans un process principal
  example: gnone-termninal_server
- Kernel threads: processus en dehors du control d'un utilisateur, bouger un threads d'un CPU a un autre, example Kthreados


Le scheduler est une fonction du noyau qui bouge constament les processus entre les CPU en fonction de leur priorite, du temps necessaire et de combien ils sont deja eu.

Quand un processus est "_running_" cela signifie qu'il execute des instructuions sur un CPU, attends d'avoir du temps d'execution. Ils sont organise dans une "Run queue".

Le mot running peut paraite ambigu car un process peut etre en attente.

Un autre etat peut etre _sleep_: en attente de quelque chose

Enin un processus peut etre _zombi_ : il n'a plus de parents, pas vraiment vivant mais toujours present


l'OS garde de trace des processus en leur donnant un ID (PID), un porcessus a aussi Parent Process ID (PPID) et un thread ID (TID)

Pour terminer un processus:

~kill -SIGKILL <PID>~ ou ~kill -9 <PID>~

*** users and group ID

plusieurs utilisateurs peuvent utiliser un meme system et ils peuvent tous utiliser de nombreux process. Le system identifie l'utilisateur qui lance le processus par son Real User ID, RUID, (un ID par utilisateur).

L'utilisateur qui determine les droit d'access pour un utilisateur est Effective UID. Il peut etre dans le meme group ou pas du RUID.

La priorite d'un process est specifie par sa "nice value", plus bas elle est plus ce process est important: -20 est le plus prioritaire et +19 est le moins urgent.

nice command permet de changer cette prio

~ps -lf~ permet de voir plus d'info

~renice +5 <PID>~ va fixer la priorite

gnone-system-monitor permnet de la faire a partir d'une interface graphic
